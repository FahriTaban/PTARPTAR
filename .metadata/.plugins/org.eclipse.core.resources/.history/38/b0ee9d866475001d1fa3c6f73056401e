package Parsing;

import static org.junit.Assert.assertEquals;

import java.util.List;

import org.junit.Test;

public class UnitTestRP {

	public static void main(String[] args) {
		String result_name = "testEFExemplify1Pneg.res";
		Result_Lexer r_lex = new Result_Lexer(result_name);		
		r_lex.findTokens();
		Result_Parser parser = new Result_Parser();
		List<Element> result = r_lex.getTokens();
	}
	
	public static void testValidRun(Result_Parser parser, List<Element> result) {
		System.out.println("VALID RUN OF RESULT");
		printElems(parser.getValidRun(result));
	}
	
	public static void testParameters(Result_Parser parser, List<Element> run) {
		System.out.println("SET OF PARAMETERS WITH SAME CONCRETE RUN");
		printElems(parser.getParameterConstraints(run));
	}
	
	public static List<List<Element>> testStates(Result_Parser parser, List<Element> run) {
		System.out.println("STATES OF THE RUN");
		List<List<Element>> automata = parser.getStates(run);
		printStructures(automata);
		return automata;
	}
	
	public static List<List<Element>> testLocations(Model_Parser parser, List<Element> state) {
		System.out.println("LOCATIONS OF " + state.get(0).getContent());
		List<List<Element>> locations = parser.getLocations(state);
		printStructures(locations);
		return locations;
	}
	
	public static List<List<Element>> testTransitions(Model_Parser parser, List<Element> location){
		System.out.println("TRANSITIONS OF LOCATION " + location.get(0).getContent());
		List<List<Element>> transitions = parser.getTransitions(location);
		printStructures(parser.getTransitions(location));
		System.out.println("______________________________________________________");
		return transitions;
	}
	
	public static void testGuards(Model_Parser parser, List<Element> transition){
		System.out.println("GUARDS OF TRANSITION");
		printStructures(parser.getGuards(transition));
	}
	
	public static void testAction(Model_Parser parser, List<Element> transition) {
		System.out.println("ACTION OF TRANSITION");
		printElem(parser.getAction(transition));
	}
	
	public static void testUpdates(Model_Parser parser, List<Element> transition){
		System.out.println("UPDATE OF TRANSITION");
		printStructures(parser.getUpdates(transition));
	}
	
	public static void getPostLoc(Model_Parser parser, List<Element> transition) {
		System.out.println("POSTLOC OF TRANSITION");
		printElem(parser.getPostLoc(transition));
	}
	
	
	static void printElem(Element elem) {
		elem.elemInfo();
	}
	
	static void printElems(List<Element> elems) {
		for (Element e : elems) {
			e.elemInfo();
		}
	}
	
	static void printStructures(List<List<Element>> structures) {
		for (List<Element> s : structures) {
			System.out.println("*".repeat(1000) + "\n NEW STRUCTURE \n " + "*".repeat(1000));
			for (Element e : s) {
				e.elemInfo();
			}
		}
	}

}

