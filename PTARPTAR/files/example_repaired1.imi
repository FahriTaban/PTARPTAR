var 
uTime,wTime,: clock;
p,: parameter;

automaton machine

synclabs: turnOn,turnOff,xdd,input,noInputRec;

loc off: invariant True 
when True sync turnOn do {uTime := 0} goto on;

loc on: invariant uTime <= p 
when True sync turnOff goto off;
when uTime >= p sync xdd goto waitForInput;

loc waitForInput: invariant wTime <= 2 
when wTime >= 2 sync noInputRec goto errorState;
when wTime <= 2 sync input do {uTime := 0} goto on;

loc errorState: invariant True 

end

automaton user

synclabs: turnOn,turnOff,input;

loc idle: invariant True 
when True sync turnOn goto useMachine;

loc useMachine: invariant True 
when True sync turnOff goto idle;

end

init := {

discrete = 
loc[machine] := off,
loc[user] := idle,
;

continuous = 
& global_time = 0
& uTime = 0
& wTime = 0
& p >= 0
& p <= 3
;
}