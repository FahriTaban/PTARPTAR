(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : PTA-like (timed) specification
 * Description      : PTA-like (timed) specification with a single impossible valuation: only the valuation p=4 from l2 to lT is forbidden
 * Correctness      : 
 * Scalable         : no
 * Generated        : no
 * Categories       : toy
 * Source           : Own work
 * bibkey           : 
 * Author           : Étienne André
 * Modeling         : Étienne André
 * Input by         : Étienne André
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2022/03/15
 * Last modified    : 2022/03/15
 * Model version    : 0.1
 *
 * IMITATOR version : 3.3-alpha
 ************************************************************)

var

(* Clocks *)
 	uTime,
	wTime,
 	global_time,
		: clock;
		
(* Parameters *)
	p,
		: parameter;


(************************************************************)
  automaton machine
(************************************************************)
synclabs: turnOn, turnOff, xdd, input, noInputRec;

loc off: invariant True
	when True sync turnOn do {uTime := 0} goto on;

loc on: invariant uTime <= p
	when True sync turnOff goto off;
	when uTime >= p sync xdd goto waitForInput;

loc waitForInput: invariant wTime <= 2
	when wTime >= 2 sync noInputRec goto errorState;
	when wTime <= 2 sync input do {uTime := 0} goto on;

loc errorState: invariant True

end (* pta *)

automaton user
synclabs: turnOn,turnOff, input;

loc idle: invariant True
	when True sync turnOn goto useMachine;

loc useMachine: invariant True
	when True sync turnOff goto idle;

end

init := {
	
    discrete =
		loc[machine] := off,
		loc[user] := idle,

    ;

    continuous =        
		(*------------------------------------------------------------*)
		(* Initial clock and signal constraints *)
		(*------------------------------------------------------------*)
		& global_time	= 0
		& uTime 	= 0
		& wTime		= 0

		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
		& p >= 0
		& p <= 3
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
